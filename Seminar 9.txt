#include <iostream>
using namespace std;
/*Sa se implementeze o clasa Spital, conform cerintelor:
* Clasa are cel putin urm atribute:
* cif (cod de identificare fiscala)
* se atribuie valoare de tip sire de carac la crearea obiectului si nu mai poate fi modificata (const)
* nume(sir de caractere)
* adresa -||-
* medici (vector de valori string alocat dinamic)
* nrmedici
* nrspitale (va retine nr de spitale = obiecte de tip spital instantiate vreodata) -static int
* 
* Se vor implementa:
* -constructor fara parametri V
* -constructor cu toti parametrii necesari instantierii unui obiect complet
* -constructor de copiere
* -destrcutor 
* 
* supraincarcare operator =
* supraincarcare operator de citire si scriere din/in consola (>> si <<)
* Supraincarcare op
* -||- [] returneaza medicul pe o pozitie data ---- atat in mod scriere cat si in mod citire
* supraincarcare op !
* cast explicit int - returneaza nr de spitale instantiate 
* metode de get si set
* cel putin unul dintre atributele de tip sir de caractere tb sa fie de tip char*
* toate atributele sa fie private
*/


class Spital {
    const string cif;
    char* nume;
    string adresa;
    string* medici;
    int nrMedici;
    static int nrSpitale;
public:
    Spital() : cif("")
    {
        this->nume = nullptr;
        this->adresa = "";
        this->medici = nullptr;
        this->nrMedici = 0;
        Spital::nrSpitale++;
    }
    Spital(string _cif, const char* _nume, string _adresa, const string* _medici, int nrMedici):cif(_cif), adresa(_adresa), nrMedici(_nrMedici)
    {
        if (_nume != nullptr)
        {
            this->nume = new char[strlen(_nume) + 1];
            strcpy(this->nume, strlen(_nume) + 1, _nume);
        }
        else
            this->nume = nullptr;

        this->medici = new string[_nrMedici];
        for (int i = p; i < _nrMedici; i++)
        {
            this->medici[i] = _medico[i];
        }
        Spital::nrSpitale++;
    }
    Spital(Spital& s): Spital(s.cif, s.nume, s.adresa, s.medici, s.nrMedici)
    {

    }

    Spital& operator = (Spital& s)
    {
        if (this == &s)
            return *this;
        delete[] this->nume;
        this->nume = new char[strlen(s.nume) + 1];
        strcpy_s(this->nume, strlen(s.nume) + 1, s.nume));

        return *this;
    }

    ~Spital()
    {
        delete[] this->nume;
        delete[] this->medici;
        //Spital::nrSpitale--;  ---daca cerinta ar fi ca Spitale sa retina Spitale active, care nu au fost sterse
    }
};

int Spital::nrSpitale = 0;

int main() {
    string* medici = new string[3];
    medici[0] = "medic 1";
    medici[1] = "medic 2";
    medici[2] = "medic 3";
    Spital s1, s2("RO1234", "Floreasca", "Bucuresti", medici, 3);
    s2 = s2;
    s1 = s2;
    return 0;
}

